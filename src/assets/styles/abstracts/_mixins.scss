@import "variables";

@mixin appear($name: 'appear', $duration: 0.2s, $delay: 0s, $translateY: -20px, $translateX: 0px, $translateToX: 0px, $translateToY: 0px, $easing: $cubicBezier, $fillMode: forwards) {
  animation: appear-#{unquote($name)} $duration $easing $delay $fillMode;

  @keyframes appear-#{unquote($name)} {
    from {
      opacity: 0;
      transform: translate($translateX, $translateY);
    }
    to {
      opacity: 1;
      transform: translate($translateToX, $translateToY);
    }
  }
}

@mixin respond-to($value) {
  //$type: type_of($value);
  //
  //@if $type == string {
  //  @if map_has_key($media-breakpoints, $value) {
  //    @media (min-width: map_get($media-breakpoints, $value)) {
  //      @content;
  //    }
  //  }
  //
  //  @else {
  //    @warn "Key `#{$value}` doesn't exist in $media-breakpoints map!";
  //  }
  //}
  //
  //@else if $type == number {
  //  @media (min-width: #{$value}) {
  //    @content;
  //  }
  //}
  
  @media (min-width: #{$value}) {
    @content;
  }
}

@mixin respond-to-less-than($value) {
  //$type: type_of($value);
  //
  //@if $type == string {
  //  @if map_has_key($media-breakpoints, $value) {
  //    @media (max-width: map_get($media-breakpoints, $value) - 1px) {
  //      @content;
  //    }
  //  }
  //
  //  @else {
  //    @warn "Key `#{$value}` doesn't exist in $media-breakpoints map!";
  //  }
  //}
  //
  //@else if $type == number {
  //  @media (max-width: #{$value}) {
  //    @content;
  //  }
  //}

  @media (max-width: #{$value}) {
    @content;
  }
}
